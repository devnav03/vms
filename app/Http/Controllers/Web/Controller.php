<?php























namespace App\Http\Controllers;























use Illuminate\Foundation\Bus\DispatchesJobs;











use Illuminate\Routing\Controller as BaseController;











use Illuminate\Foundation\Validation\ValidatesRequests;











use Illuminate\Foundation\Auth\Access\AuthorizesRequests;











use DB;











use App\Model\Transaction;











use App\User;











use App\Model\Order;











use App\Model\Product;











use App\Model\UserCart;























use Carbon\Carbon;























class Controller extends BaseController











{











    use AuthorizesRequests, DispatchesJobs, ValidatesRequests;



































  public static function myDwonlines($user_id, $position){























    $all_users = [];























    $count_users = 0;























    $current_ids = [];























    $user_ids = '';























    $team_bv = 0;











    $self_bv = 0;























    if($position == 1){











        $self_bv += Order::select('bv')->where(['order_type'=>2, 'user_id'=>$user_id])->whereNotIn('order_status_id', [1,6])->sum('bv');











    }























    // if($user_id == 1085 || $user_id == 8373){











        $data = DB::select('SELECT `id`  FROM `users` WHERE `parent_id` = '.$user_id.' and `team_group` = '.$position.' AND `deleted_at` IS NULL');        





        // $data = DB::select('SELECT `id`  FROM `users` WHERE `parent_id` = '.$user_id.' and `team_group` = '.$position.' AND `activation_status` = 1');        











    // }else{











        // $data = DB::select('SELECT `id`  FROM `users` WHERE `parent_id` = '.$user_id.' and `team_group` = '.$position.'');            











    // }























    if(count($data)){























        $current_ids = array_pluck($data, 'id');























        if(count($current_ids)){























            $user_ids = (implode(',',$current_ids));























            $all_users = array_merge($all_users, $current_ids);























            $count_users += count($current_ids);











        }























        while(count($current_ids))























        {         























        foreach ($current_ids as $id) {











            $team_bv += Order::select('bv')->where(['order_type'=>2, 'user_id'=>$id])->whereNotIn('order_status_id', [1,6])->sum('bv');











          }   























          // if($user_id == 1085 || $user_id == 8373){











              $data = DB::select('SELECT `id` FROM `users` WHERE `parent_id` in ('.$user_ids.') AND `deleted_at` IS NULL');        





              // $data = DB::select('SELECT `id` FROM `users` WHERE `parent_id` in ('.$user_ids.') AND `activation_status` = 1');        











          // }else{











          //     $data = DB::select('SELECT `id` FROM `users` WHERE `parent_id` in ('.$user_ids.')');            











          // }        























          $current_ids = array_pluck($data, 'id');























          if(count($current_ids)){























              $user_ids = (implode(',',$current_ids));























              $all_users = array_merge($all_users,$current_ids);























              $count_users += count($current_ids);


          }


        }








    }








    return ['all_downline'=>$all_users, 'total_count'=>$count_users, 'total_bv'=>$team_bv, 'self_bv'=>$self_bv];











  }











  











  



































   public static function getmyteam_userIDS($user_id){























            $all_users = [];























            $current_ids = [];























            $user_ids = '';























            $data = DB::select('SELECT `id`  FROM `users` WHERE `parent_id` = '.$user_id.' AND `deleted_at` IS NULL');            























            if(count($data)){























                $current_ids = array_pluck($data, 'id');























                if(count($current_ids)){























                    $user_ids = (implode(',',$current_ids));























                    $all_users = array_merge($all_users, $current_ids);











                }























                while(count($current_ids))























                {                    























                    $data = DB::select('SELECT `id` FROM `users` WHERE `parent_id` in ('.$user_ids.') AND `deleted_at` IS NULL');























                    $current_ids = array_pluck($data, 'id');























                    if(count($current_ids)){























                        $user_ids = (implode(',',$current_ids));























                        $all_users = array_merge($all_users,$current_ids);























                    }























                }























            }























        return ['all_downline'=>$all_users];























    }























    public function CreateTransaction($type, $amount, $transaction_type_id, $from, $to, $status, $pay_mode,$remark){























      $transaction = new Transaction();











      $transaction->type                = $type;











      $transaction->transaction_type_id = $transaction_type_id;











      $transaction->pay_mode            = $pay_mode;











      $transaction->from_user_id        = $from;











      $transaction->to_user_id          = $to;











      $transaction->amount              = $amount;











      $transaction->status              = $status;











      $transaction->remark              = $remark;











      $transaction->save();























      return $transaction->id;











    }











  











  # Repurchase business











public static function calculateTeamIncome($user_id,$to_date=''){











        $team_a_business=0;











        $team_b_business=0;











        $matching_bussiness=0;











        $team_a=0;











        $team_b=0;











        $user_team=User::select('id','first_name', 'last_name', 'mobile','email', 'status', 'refer_code', 'parent_id', 'current_level', 'activation_status', 'sponsored_by_id', 'created_at')











       ->where(['parent_id'=>$user_id,'activation_status'=>1])











       ->get();











       











      











      $total_team=count($user_team);











      if ($total_team>0){











       $team_a_business=Controller::travarseTree($user_team[0]->id,$to_date);











       $team_a=$user_team[0]->id;











     }











       if ($total_team >1){











       $team_b_business=Controller::travarseTree($user_team[1]->id,$to_date);











        $team_b=$user_team[1]->id;











    }



































       if($team_a_business <= $team_b_business)











        $matching_bussiness= $team_a_business;











      else











       $matching_bussiness= $team_b_business;



































    //}











     if ($team_a_business >0 or $team_b_business >0 ){











    $all_team=array('user_id'=> $user_id,











                    'business'=>array(











                        'team_a_bv'       => $team_a_business,











                        'team_b_bv'       => $team_b_business,











                        'team_a'          => $team_a,











                        'team_b'          => $team_b,











                        'matching_bv'     => $matching_bussiness,











                        'self_bv'         => Controller::getselfBusiness($user_id),











            ),











          );











        }else{











          $all_team=array();











        }











    return $all_team;











    }























  public static function getselfBusiness($user_id){











    $total_order_bv = Order::where(['user_id'=>$user_id])











   ->where('order_status_id', '>=', 2)











   ->whereIn('order_type', [ 2])











   ->get();











    return  $total_order_bv->sum('bv');











}























  











  public static function travarseTree($user_id,$to_date=''){











        $current_ids = [];











        $user_ids = '';











        $data = DB::select('SELECT `id`  FROM `users` WHERE  `parent_id` = '.$user_id.' AND `deleted_at` IS NULL');











        $total_user_order_bv=0;











        $total_order_bv=0;       











        $total_order_bv = Order::where(['user_id'=>$user_id])











        ->where('order_status_id', '>=', 2)











       ->where('created_at','<=',$to_date)











       ->whereIn('order_type', [ 2])











        ->get();











   











        $total_user_order_bv+=$total_order_bv->sum("bv");











        if(count($data)){











            $current_ids = array_pluck($data, 'id');











            if(count($current_ids)){











                $user_ids = (implode(',',$current_ids));











            }











            while(count($current_ids)){











                foreach ($current_ids as $user) {











                    $total_order_bv = Order::where(['user_id'=>$user])











                    ->where('order_status_id', '>=', 2)











                    ->whereIn('order_type', [ 2])











           ->where('created_at','<=',$to_date)











                    ->get();











                  $total_user_order_bv+=$total_order_bv->sum("bv");











                }











                











                $data = DB::select('SELECT `id` FROM `users` WHERE `parent_id` in ('.$user_ids.') AND `deleted_at` IS NULL');























                $current_ids = array_pluck($data, 'id');











                if(count($current_ids)){











                    $user_ids = (implode(',',$current_ids));











                }











            }











        }











        return $total_user_order_bv;























    }











  











  public static function showRepurchaseNoticDate($user_id){























$user_join_date = User::select("created_at")->where(['id'=>$user_id])->first()->toArray();























$all_user_repurchase_orders = DB::select("SELECT DATE_FORMAT(created_at, '%Y-%m') as date,count(id)as total_repurchase,SUM(total) AS month_total,MONTH(created_at) AS month FROM orders where user_id='".$user_id."'  GROUP BY MONTH(created_at)");











 











$join_date=$user_join_date['created_at'];











$start_date=date('Y-m-d', strtotime($join_date));











$all_months[]=date('Y-m-d', strtotime($start_date)).'::'.date('Y-m-d', strtotime($start_date.' + 23 days'));























while(1){











$start_date=date('Y-m-d', strtotime($join_date. ' + 30 days'));











$join_date=$start_date;











$all_months[]=date('Y-m-d', strtotime($start_date)).'::'.date('Y-m-d', strtotime($start_date.' + 23 days'));











if (date('Y', strtotime($join_date))==date("Y") && date('m', strtotime($join_date))==date("m")){











  break;











}











 }











return $all_months;























}























public static function getCurrentMonthTotal($user_id){











  $from_date = date('Y-m-01 00:00:00'); // hard-coded '01' for first day











  $to_date  = date('Y-m-t 23:59:59');











  $all_user_repurchase_orders = DB::select('SELECT count(id) as total_repurchase_orders,SUM(total) AS month_total,MONTH(created_at) AS month FROM orders where user_id="'.$user_id.'"  and `created_at` BETWEEN "'.$from_date.'" AND "'.$to_date.'" GROUP BY MONTH(created_at)');











  $total_monthly_user_repurchase=0;











  if ($all_user_repurchase_orders){











      $total_monthly_user_repurchase=$all_user_repurchase_orders[0]->month_total;











  }











   return  $total_monthly_user_repurchase;











}



































public static function check4minmumRepurchaseValidateOrder($request){











  











  











     $user_id = $request->user()->id;











      $join_date = $request->user()->created_at;











        $today_date = Carbon::today();











        $month = $join_date->diffInMonths($today_date);











        $total_days = $join_date->diffInDays($today_date);











        $extra_days=0;











        $total_month_repurchase=0;











        $total_required_repurchase=0;











        if ($total_days>30){











        $extra_days=$total_days%(30* $month );











      }else











      {











        $extra_day=0;











      }























        $days = fmod($total_days, 30);











      if ($request->user()->activation_status==0){











        $user_repurchase_data=[











            'user_id'      =>$user_id,











            'pending'        =>0,











            'pending_month'  =>0,











            'locked_user'    =>0,











            'days'=> $days,











            'join_date'=> $join_date,











            'today'=> $today_date,











            'month'=>$month,











            'total_days'=>  $total_days,











            'extra_days'=> $extra_days,











            'which_month'    => array(),











      











                ];























                return $user_repurchase_data;























      }











    











       











  











        $which_month = [];











        $all_month=[];























        for ($i=1; $i <= $month; $i++) { 











       











      











        $start_date = Carbon::parse($join_date)->addMonth($i-1)->toDateString();











        $end_date = Carbon::parse($start_date)->addMonth(1)->addDays(1)->toDateString();











        











        $check_order_amnt = Order::











        whereBetween('created_at', array($start_date." 00:00:00", $end_date." 23:59:59")) 











        //ereBetween('created_at', [$start_date, $end_date])











        ->where(['user_id'=>$user_id, 'order_type'=>2])











        ->where('order_status_id','>=',2)











        ->sum('total');



































        $start_date=date('Y-m-d', strtotime($start_date));











        $end_date=date('Y-m-d', strtotime($end_date));











        $today_date=date('Y-m-d', strtotime($today_date));











        $t_array = [











                'amount'=> $check_order_amnt,











                'count'=>$i,











                 'start_date'=>$start_date,











                 'end_date'=>$end_date,











             ];











            array_push($all_month,  $t_array);











           























           if($check_order_amnt <300){











            array_push($which_month,  $t_array);











           }else











           {











             $total_month_repurchase= $total_month_repurchase+$check_order_amnt;











           }











       }



































    















































        $total_required_repurchase= $month *300;















































       if ($month==0){











       











        $start_date = Carbon::parse($join_date);











        $end_date = Carbon::parse($start_date)->addMonth(1);











        











        $check_order_amnt = Order::











        //whereBetween('created_at', [$start_date, $end_date])











        whereBetween('created_at', array($start_date." 00:00:00", $end_date." 23:59:59"))











        ->where(['user_id'=>$user_id, 'order_type'=>2])











        ->where('order_status_id','>=',2)











        ->sum('total');



































      $t_array = [











                'amount'=> $check_order_amnt,











                'count'=>$i,











                'start_date'=>$start_date,











                'end_date'=>$end_date,











             ];











       array_push($all_month,  $t_array);











       if($check_order_amnt <300){











           array_push($which_month,  $t_array);











           }











       }























       $pending =0;











       $pending_month=0;











       $locked_user=0;











    if(count($which_month)){











        $pending_month=count($which_month);











        











       }











 











       if ( $pending_month <=1 &&  $extra_days >0 && $extra_days <7){











            $pending =1;











            $locked_user=1;











        }











    











       if ( $pending_month <=1 &&  $extra_days >=7 && $extra_days <15){











            $pending =1;











            $locked_user=1;











        }











    











       











        elseif ( $pending_month >=1 &&  $extra_days >=15){











            $pending =1;











            $locked_user=2;











        }











    











     //$start_date = Carbon::parse($join_date)->addMonth($i-1)->subDays($extra_days+1)->toDateString();











     $start_date = Carbon::parse($join_date)->addMonth($i-1)->toDateString();











     $end_date = Carbon::parse($start_date)->addMonth(1)->addDays()->toDateString();











         //whereDate('creaed_at', [$start_date, $end_date])











        $check_order_amnt = Order::whereBetween('created_at', array($start_date." 00:00:00", $end_date." 23:59:59"))











        ->where(['user_id'=>$user_id,  'order_type'=>2])











        ->where('order_status_id','>=',2)











        ->sum('total');























if ($check_order_amnt>0)











{











  











  $total_month_repurchase=$total_month_repurchase+$check_order_amnt;











}











if (  $total_month_repurchase >=$total_required_repurchase ){











       $pending =0;











       $pending_month=0;











       $locked_user=0;























}























        # User Repurchase data to validate the minimum order for 300 Rs.#











            $user_repurchase_data=[











            'user_id'        => $user_id,











            'pending'        => $pending,











            'pending_month'  => $pending_month,











            'locked_user'    => $locked_user,











            'days'           => $days,











            'month'          => $month,











            'total_days'     => $total_days,











            'extra_days'     => $extra_days,











            'join_date'      => $join_date,











            'today'          => $today_date,











            'which_month'    => $which_month,











             'all_month'     => $all_month,











             'total_month_repurchase' => $total_month_repurchase,











             'total_required_repurchase'=> $total_required_repurchase,











                ];























       return  $user_repurchase_data;         











    }

















    #dec 30 2019 for dailly capping





  





  public static function todayCapping($user_id, $position, $today_date){





    $today_users = 0;





    $all_users = 0;





    $team_bv = 0;





    $self_bv = 0;





    if($position == 1){


      $self_bv += Order::select('bv')->where(['order_type'=>2, 'user_id'=>$user_id])->whereNotIn('order_status_id', [1,6])->sum('bv');


    }





    if($user_id == 105867 && $position == 1){


       return ['all_users'=>138710, 'today_users'=>0, 'self_bv'=>$self_bv, 'total_bv'=>300];


    }








    $data = DB::select('SELECT `id`, `plan_detail_id`, `activation_date`  FROM `users` WHERE `team_group` = '.$position.'  AND `parent_id` = '.$user_id.' AND `activation_status` = 1 AND `deleted_at` IS NULL');





   





    if(count($data)){











        $current_ids = array_pluck($data, 'id');











        if(count($current_ids)){ 











            $user_ids = (implode(',',$current_ids));








            $all_users += count($current_ids);





        }











        while(count($current_ids))











        { 











          foreach ($data as $key => $user) {





             if(($user->plan_detail_id = 27 || $user->plan_detail_id = 28) &&  $user->activation_date >= $today_date){





                $today_users += 1;





             }





          }

















          $data = DB::select('SELECT `id`, `plan_detail_id`, `activation_date` FROM `users` WHERE `parent_id` in ('.$user_ids.') AND `activation_status` = 1 AND `deleted_at` IS NULL');      





         





          $current_ids = array_pluck($data, 'id');











          if(count($current_ids)){











              $user_ids = (implode(',',$current_ids));











              // $all_users = array_merge($all_users,$current_ids);











              $all_users += count($current_ids);











          }











        }











    }











    return ['all_users'=>$all_users, 'today_users'=>$today_users, 'self_bv'=>$self_bv, 'total_bv'=>$team_bv];





  }











  





  public static function allUserDwonlinesCrown($user_id, $crown_club_id){





    $today_users = 0;


    $all_users = 0;


    $data = DB::select('SELECT `user_id` FROM `user_pools` WHERE `pool_club_id` = '.$crown_club_id.' AND `parent_id` = '.$user_id.'');  





    if(count($data)){


      $current_ids = array_pluck($data, 'user_id');


      if(count($current_ids)){ 


        $user_ids = (implode(',',$current_ids));


        $all_users += count($current_ids);


      }    





      while(count($current_ids)){ 


      $data = DB::select('SELECT `user_id` FROM `user_pools` WHERE `parent_id` in ('.$user_ids.') AND `pool_club_id` = '.$crown_club_id.'');               


    


        $current_ids = array_pluck($data, 'user_id');


        if(count($current_ids)){


            $user_ids = (implode(',',$current_ids));


            $all_users += count($current_ids);


        }


      }


    }


    return ['all_users'=>$all_users];


  }














}











